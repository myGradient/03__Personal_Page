/* SASS or SCSS is somekind of core styling. Sass is a CSS preprocessor, which adds special features such as variables, nested rules and mixins (sometimes referred to as syntactic sugar) into regular CSS. The aim is to make the coding process simpler and more efficient.  */

@import 'reset';
@import 'config';
@import 'menu';


/* Here by using astriks in CSS I'm selecting every thing, defining "box-sizing:border-box"==> on an element padding and border are included in the width and height: */
* {
  box-sizing: border-box;
}



body {
  @include background;
  background: $primary-color;
  color: set-text-color($primary-color); //here in stead of asigning text color manually I just call the function that I created in _config.scss file which is setting up the text color automatically by checking the background color. 
  height: 100%;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.5;
}

/* Headings: I used sass here here. For example by using "&" means every property that defined for h1, h2, h3 will apply for that element coming after &(the class name) sign. 1rem here is default font size of html, "em" is inherit to parent element. */ 
h1,
h2,
h3 {
  margin: 0;
  font-weight: 400;

  &.lg-heading {
    font-size: 6rem;
  }

  &.sm-heading {
    margin-bottom: 2rem;
    padding: 0.2rem 1rem;
    background: rgba(lighten($primary-color, 2), 0.5);
  }
}

a {
  color: #fff;
  text-decoration: none;
}
/* I always want to the header to be in the top so I choosed position fixed, z-Index: bigger number means element closer to us. seconadry color is yellow  */
header {
  position: fixed;
  z-index: 2;
  width: 100%;
}

/*in sass dolar $ sign we are using for variable */
.text-secondary {
  color: $secondary-color;
}


/* I nested some other element to the main section like icons, a etc.. Every nested element will apply parents property plus its own property. "vh": it stands for view port hight*/
main {
  padding: 4rem;
  // height: 100%;
  min-height: calc(100vh - 60px);// here 60px for footer which means my content will show up until footer area.I define my content area by substracting/deducting footer area. This just to create sticky footer. Now I can add or remove content footer will stick same position. "calc" is good.

  .icons {
    margin-top: 1rem;

    a {
      padding: 0.4rem;
      @include easeOut;

      &:hover {
        color: $secondary-color;
      }
    }
  }

  &#home {
    overflow: hidden;
    h1 {
      margin-top: 20vh;
    }
  }
}
/* Everthing that in this class naturally will be grid item for me. "grid-template-areas:" is visual representative of grid for example first row:" 'bioimage bio bio'" and second row: "'job1 job2 job3';"  */
.about-info {
  display: grid;
  grid-gap: 30px;
  grid-template-areas:
    'bioimage bio bio'
    'job1 job2 job3';
  grid-template-columns: repeat(3, 1fr); // I can write like this also "1fr 1fr 1fr"

  .bio-image {
    grid-area: bioimage;  // related with ".about-info"
    margin: auto;
    border-radius: 50%;
    border: $secondary-color 3px solid;
  }

  .bio {
    grid-area: bio;     // related with ".about-info"
    font-size: 1.5rem;
  }

  .job-1 {
    grid-area: job1;
  }

  .job-2 {
    grid-area: job2;
  }

  .job-3 {
    grid-area: job3;
  }

  .job {
    background: lighten($primary-color, 5);
    padding: 0.5rem;
    border-bottom: $secondary-color 5px solid;
  }
}

// Work/Projects  
.projects {
  display: grid;
  grid-gap: 0.7rem;
  grid-template-columns: repeat(3, 1fr);

  img {
    width: 100%; // images shrink 100% of its container or parent element.
    border: 3px #fff solid;

    &:hover {
      opacity: 0.5;
      border-color: $secondary-color;
      @include easeOut;
    }
  }
}

  // Contact Page: normally I would use Grid but for this part I used flex
.boxes {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  align-items: center;
  margin-top: 1rem;

  div {
    font-size: 2rem;
    border: 3px #fff solid;
    padding: 1.5rem 2.5rem;
    margin-bottom: 3rem;
    @include easeOut;

    &:hover {
      padding: 0.5rem 1.5rem;
      background: $secondary-color;
      color: set-text-color($secondary-color);
      span {
        color: set-text-color($secondary-color);
      }
    } 
  }
}

// Button Styles
.btn {
  display: block;
  padding: 0.5rem 1rem;
  border: 0;
  margin-bottom: 0.3rem;
  &:hover {
    background: $secondary-color;
    color: set-text-color($secondary-color);
  }
}

.btn-dark {
  @extend .btn;
  background: darken($primary-color, 50);
  color: #fff;
}

.btn-light {
  @extend .btn;
  background: lighten($primary-color, 50);
  color: #333;
}

#main-footer {
  text-align: center;
  padding: 1rem;
  background: darken($primary-color, 10);
  color: set-text-color($primary-color);
  height: 60px;
}

@import 'mobile'; //It's in the bottom because I want to run it after initial css content.
