/* SASS or SCSS is somekind of core styling. Sass is a CSS preprocessor, which adds special features such as variables, nested rules and mixins (sometimes referred to as syntactic sugar) into regular CSS. The aim is to make the coding process simpler and more efficient.  */
/* I save all the variables and  mixins here to be well organized and more clear. To be able to use all variables I'll import this file from "main.scss". It's like liking files */
/*  Read to Undertstand ME!!!
==> Menu Button: It always shoulde be same position that we want to see it so I set it absolute and z-index:3 it means closer  position to viewer top layer of html

==> Mixins allow document authors to define patterns of property value pairs, which can then be reused in other rulesets.
==> For example here I used mixin: "@include easeOut;"  it's like preparing function in different file and call it for usage. In this example all the mixin property defined in the file: "_config.scss" When I need it I can call them it will be enough.
Include allows the property value pairs in an @mixin to be copied into the current declaration block.

==>'@' calling prepared function to use.
==>'&' concatenates the parent class
*/
.menu-btn {
  position: absolute;
  z-index: 3;
  right: 35px;
  top: 35px;
  cursor: pointer;
  transition: all 0.5s ease-out;
  /*  
  Rotate Into X With Menu Lines, bassically  configurating 'close' class. This class is not permanent, I'm creating it with JS(main.js) when menu clicked and visiable in console in clicked. state. */ }
  .menu-btn .btn-line {
    width: 28px;
    height: 3px;
    margin: 0 0 5px 0;
    background: #fff;
    transition: all 0.5s ease-out; }
  .menu-btn.close {
    transform: rotate(180deg); }
    .menu-btn.close .btn-line:nth-child(1) {
      transform: rotate(45deg) translate(5px, 5px); }
    .menu-btn.close .btn-line:nth-child(2) {
      opacity: 0; }
    .menu-btn.close .btn-line:nth-child(3) {
      transform: rotate(-45deg) translate(7px, -6px); }

.menu {
  position: fixed;
  top: 0;
  width: 100%;
  opacity: 0.9;
  visibility: hidden;
  /* Used of "&=menu" like ".this" in object. I'm styling branding class which is inside the menu that situated in html*/
  /* I'm styling right side of my menu which is &-nav(or menu-nav)*/
  /* For navigation item will off the screen until show state */
  /* Just little bit styling for nav link/items */ }
  .menu.show {
    visibility: visible; }
  .menu-branding, .menu-nav {
    display: flex;
    flex-flow: column wrap;
    align-items: center;
    justify-content: center;
    float: left;
    width: 50%;
    height: 100vh;
    overflow: hidden; }
  .menu-nav {
    margin: 0;
    padding: 0;
    background: #373737;
    list-style: none;
    transform: translate3d(0, -100%, 0);
    transition: all 0.5s ease-out; }
    .menu-nav.show {
      transform: translate3d(0, 0, 0); }
  .menu-branding {
    background: #444;
    transform: translate3d(0, 100%, 0);
    transition: all 0.5s ease-out;
    /* Here the portrait: by choosing border radius %50 it will be circle. And I put frame color also by defining boder properties.  */ }
    .menu-branding.show {
      transform: translate3d(0, 0, 0); }
    .menu-branding .portrait {
      width: 250px;
      height: 250px;
      background: url("../img/Portrait_Mid.jpg");
      border-radius: 50%;
      border: solid 3px #cea425; }
  .menu .nav-item {
    transform: translate3d(600px, 0, 0);
    transition: all 0.5s ease-out; }
    .menu .nav-item.show {
      transform: translate3d(0, 0, 0); }
    .menu .nav-item.current > a {
      color: #cea425; }
  .menu .nav-link {
    display: inline-block;
    position: relative;
    font-size: 30px;
    text-transform: uppercase;
    padding: 1rem 0;
    font-weight: 300;
    color: #fff;
    text-decoration: none;
    transition: all 0.5s ease-out; }
    .menu .nav-link:hover {
      color: #cea425; }

.nav-item:nth-child(1) {
  transition-delay: 0.1s; }

.nav-item:nth-child(2) {
  transition-delay: 0.2s; }

.nav-item:nth-child(3) {
  transition-delay: 0.3s; }

.nav-item:nth-child(4) {
  transition-delay: 0.4s; }

/* Here by using astriks in CSS I'm selecting every thing, defining "box-sizing:border-box"==> on an element padding and border are included in the width and height: */
* {
  box-sizing: border-box; }

body {
  background: #444;
  color: #fff;
  height: 100%;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.5; }
  body#bg-img {
    background: url(../img/Background02.jpg);
    background-attachment: fixed;
    background-size: cover; }
    body#bg-img:after {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      background: rgba(68, 68, 68, 0.9); }

/* Headings: I used sass here here. For example by using "&" means every property that defined for h1, h2, h3 will apply for that element coming after &(the class name) sign. 1rem here is default font size of html, "em" is inherit to parent element. */
h1,
h2,
h3 {
  margin: 0;
  font-weight: 400; }
  h1.lg-heading,
  h2.lg-heading,
  h3.lg-heading {
    font-size: 6rem; }
  h1.sm-heading,
  h2.sm-heading,
  h3.sm-heading {
    margin-bottom: 2rem;
    padding: 0.2rem 1rem;
    background: rgba(73, 73, 73, 0.5); }

a {
  color: #fff;
  text-decoration: none; }

/* I always want to the header to be in the top so I choosed position fixed, z-Index: bigger number means element closer to us. seconadry color is yellow  */
header {
  position: fixed;
  z-index: 2;
  width: 100%; }

/*in sass dolar $ sign we are using for variable */
.text-secondary {
  color: #cea425; }

/* I nested some other element to the main section like icons, a etc.. Every nested element will apply parents property plus its own property. "vh": it stands for view port hight*/
main {
  padding: 4rem;
  min-height: calc(100vh - 60px); }
  main .icons {
    margin-top: 1rem; }
    main .icons a {
      padding: 0.4rem;
      transition: all 0.5s ease-out; }
      main .icons a:hover {
        color: #cea425; }
  main#home {
    overflow: hidden; }
    main#home h1 {
      margin-top: 20vh; }

/* Everthing that in this class naturally will be grid item for me. "grid-template-areas:" is visual representative of grid for example first row:" 'bioimage bio bio'" and second row: "'job1 job2 job3';"  */
.about-info {
  display: grid;
  grid-gap: 30px;
  grid-template-areas: 'bioimage bio bio' 'job1 job2 job3';
  grid-template-columns: repeat(3, 1fr); }
  .about-info .bio-image {
    grid-area: bioimage;
    margin: auto;
    border-radius: 50%;
    border: #cea425 3px solid; }
  .about-info .bio {
    grid-area: bio;
    font-size: 1.5rem; }
  .about-info .job-1 {
    grid-area: job1; }
  .about-info .job-2 {
    grid-area: job2; }
  .about-info .job-3 {
    grid-area: job3; }
  .about-info .job {
    background: #515151;
    padding: 0.5rem;
    border-bottom: #cea425 5px solid; }

.projects {
  display: grid;
  grid-gap: 0.7rem;
  grid-template-columns: repeat(3, 1fr); }
  .projects img {
    width: 100%;
    border: 3px #fff solid; }
    .projects img:hover {
      opacity: 0.5;
      border-color: #cea425;
      transition: all 0.5s ease-out; }

.boxes {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  align-items: center;
  margin-top: 1rem; }
  .boxes div {
    font-size: 2rem;
    border: 3px #fff solid;
    padding: 1.5rem 2.5rem;
    margin-bottom: 3rem;
    transition: all 0.5s ease-out; }
    .boxes div:hover {
      padding: 0.5rem 1.5rem;
      background: #cea425;
      color: #000; }
      .boxes div:hover span {
        color: #000; }

.btn, .btn-dark, .btn-light {
  display: block;
  padding: 0.5rem 1rem;
  border: 0;
  margin-bottom: 0.3rem; }
  .btn:hover, .btn-dark:hover, .btn-light:hover {
    background: #cea425;
    color: #000; }

.btn-dark {
  background: black;
  color: #fff; }

.btn-light {
  background: #c4c4c4;
  color: #333; }

#main-footer {
  text-align: center;
  padding: 1rem;
  background: #2b2b2b;
  color: #fff;
  height: 60px; }

@media screen and (min-width: 1171px) {
  .projects {
    grid-template-columns: repeat(4, 1fr); } }

@media screen and (min-width: 769px) and (max-width: 1170px) {
  .projects {
    grid-template-columns: repeat(3, 1fr); } }

@media screen and (max-width: 768px) {
  main {
    align-items: center;
    text-align: center; }
    main .lg-heading {
      line-height: 1;
      margin-bottom: 1rem; }
  ul.menu-nav,
  div.menu-branding {
    float: none;
    width: 100%;
    min-height: 0; }
    ul.menu-nav.show,
    div.menu-branding.show {
      transform: translate3d(0, 0, 0); }
  .menu-nav {
    height: 75vh;
    transform: translate3d(-100%, 0, 0);
    font-size: 24px; }
  .menu-branding {
    height: 25vh;
    transform: translate3d(100%, 0, 0); }
    .menu-branding .portrait {
      background: url("../img/Portrait_S.jpg");
      width: 150px;
      height: 150px; }
  .about-info {
    grid-template-areas: 'bioimage' 'bio' 'job1' 'job2' 'job3';
    grid-template-columns: 1fr; }
  .projects {
    grid-template-columns: repeat(2, 1fr); } }

@media screen and (max-width: 500px) {
  main {
    padding: 2rem; }
    main #home h1 {
      margin-top: 10vh; }
    main .lg-heading {
      margin-top: 1rem;
      margin-bottom: 8vh;
      font-size: 18vw;
      /* 4.2rem; */ }
    main .icons {
      margin-top: 20vh; }
  .projects {
    grid-template-columns: 1fr; } }
